/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace protocols.pubs
{
  public partial class BattleService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::protocols.pubs.CreateBattleSpaceResp> OnCreateBattleSpace(global::protocols.pubs.CreateBattleSpace @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::protocols.pubs.GetBattleSpaceListResp> OnGetBattleSpaceList(global::protocols.pubs.GetBattleSpaceList @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::protocols.pubs.EnterBattleSpaceResp> OnEnterBattleSpace(global::protocols.pubs.EnterBattleSpace @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::protocols.pubs.ReadyBattleSpaceResp> OnReadyBattleSpace(global::protocols.pubs.ReadyBattleSpace @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::protocols.pubs.RequsetStartBattleSpaceResp> OnRequsetStartBattleSpace(global::protocols.pubs.RequsetStartBattleSpace @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::protocols.pubs.ExitBattleSpaceResp> OnExitBattleSpace(global::protocols.pubs.ExitBattleSpace @req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.CreateBattleSpaceResp> OnCreateBattleSpace(global::protocols.pubs.CreateBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await send_OnCreateBattleSpace(@req, cancellationToken);
        return await recv_OnCreateBattleSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OnCreateBattleSpace(global::protocols.pubs.CreateBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OnCreateBattleSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp0 = new InternalStructs.OnCreateBattleSpace_args() {
          Req = @req,
        };
        
        await tmp0.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.CreateBattleSpaceResp> recv_OnCreateBattleSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp1 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1.Type == TMessageType.Exception)
        {
          var tmp2 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2;
        }

        var tmp3 = new InternalStructs.OnCreateBattleSpace_result();
        await tmp3.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3.__isset.success)
        {
          return tmp3.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OnCreateBattleSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.GetBattleSpaceListResp> OnGetBattleSpaceList(global::protocols.pubs.GetBattleSpaceList @req, CancellationToken cancellationToken = default)
      {
        await send_OnGetBattleSpaceList(@req, cancellationToken);
        return await recv_OnGetBattleSpaceList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OnGetBattleSpaceList(global::protocols.pubs.GetBattleSpaceList @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OnGetBattleSpaceList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp4 = new InternalStructs.OnGetBattleSpaceList_args() {
          Req = @req,
        };
        
        await tmp4.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.GetBattleSpaceListResp> recv_OnGetBattleSpaceList(CancellationToken cancellationToken = default)
      {
        
        var tmp5 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp5.Type == TMessageType.Exception)
        {
          var tmp6 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp6;
        }

        var tmp7 = new InternalStructs.OnGetBattleSpaceList_result();
        await tmp7.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp7.__isset.success)
        {
          return tmp7.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OnGetBattleSpaceList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.EnterBattleSpaceResp> OnEnterBattleSpace(global::protocols.pubs.EnterBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await send_OnEnterBattleSpace(@req, cancellationToken);
        return await recv_OnEnterBattleSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OnEnterBattleSpace(global::protocols.pubs.EnterBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OnEnterBattleSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp8 = new InternalStructs.OnEnterBattleSpace_args() {
          Req = @req,
        };
        
        await tmp8.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.EnterBattleSpaceResp> recv_OnEnterBattleSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp9 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp9.Type == TMessageType.Exception)
        {
          var tmp10 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp10;
        }

        var tmp11 = new InternalStructs.OnEnterBattleSpace_result();
        await tmp11.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp11.__isset.success)
        {
          return tmp11.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OnEnterBattleSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.ReadyBattleSpaceResp> OnReadyBattleSpace(global::protocols.pubs.ReadyBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await send_OnReadyBattleSpace(@req, cancellationToken);
        return await recv_OnReadyBattleSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OnReadyBattleSpace(global::protocols.pubs.ReadyBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OnReadyBattleSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp12 = new InternalStructs.OnReadyBattleSpace_args() {
          Req = @req,
        };
        
        await tmp12.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.ReadyBattleSpaceResp> recv_OnReadyBattleSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp13 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp13.Type == TMessageType.Exception)
        {
          var tmp14 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp14;
        }

        var tmp15 = new InternalStructs.OnReadyBattleSpace_result();
        await tmp15.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp15.__isset.success)
        {
          return tmp15.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OnReadyBattleSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.RequsetStartBattleSpaceResp> OnRequsetStartBattleSpace(global::protocols.pubs.RequsetStartBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await send_OnRequsetStartBattleSpace(@req, cancellationToken);
        return await recv_OnRequsetStartBattleSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OnRequsetStartBattleSpace(global::protocols.pubs.RequsetStartBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OnRequsetStartBattleSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp16 = new InternalStructs.OnRequsetStartBattleSpace_args() {
          Req = @req,
        };
        
        await tmp16.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.RequsetStartBattleSpaceResp> recv_OnRequsetStartBattleSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp17 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp17.Type == TMessageType.Exception)
        {
          var tmp18 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp18;
        }

        var tmp19 = new InternalStructs.OnRequsetStartBattleSpace_result();
        await tmp19.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp19.__isset.success)
        {
          return tmp19.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OnRequsetStartBattleSpace failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.ExitBattleSpaceResp> OnExitBattleSpace(global::protocols.pubs.ExitBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await send_OnExitBattleSpace(@req, cancellationToken);
        return await recv_OnExitBattleSpace(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OnExitBattleSpace(global::protocols.pubs.ExitBattleSpace @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OnExitBattleSpace", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp20 = new InternalStructs.OnExitBattleSpace_args() {
          Req = @req,
        };
        
        await tmp20.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::protocols.pubs.ExitBattleSpaceResp> recv_OnExitBattleSpace(CancellationToken cancellationToken = default)
      {
        
        var tmp21 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp21.Type == TMessageType.Exception)
        {
          var tmp22 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp22;
        }

        var tmp23 = new InternalStructs.OnExitBattleSpace_result();
        await tmp23.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp23.__isset.success)
        {
          return tmp23.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OnExitBattleSpace failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["OnCreateBattleSpace"] = OnCreateBattleSpace_ProcessAsync;
        processMap_["OnGetBattleSpaceList"] = OnGetBattleSpaceList_ProcessAsync;
        processMap_["OnEnterBattleSpace"] = OnEnterBattleSpace_ProcessAsync;
        processMap_["OnReadyBattleSpace"] = OnReadyBattleSpace_ProcessAsync;
        processMap_["OnRequsetStartBattleSpace"] = OnRequsetStartBattleSpace_ProcessAsync;
        processMap_["OnExitBattleSpace"] = OnExitBattleSpace_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task OnCreateBattleSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp24 = new InternalStructs.OnCreateBattleSpace_args();
        await tmp24.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp25 = new InternalStructs.OnCreateBattleSpace_result();
        try
        {
          tmp25.Success = await _iAsync.OnCreateBattleSpace(tmp24.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OnCreateBattleSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp25.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp26)
        {
          var tmp27 = $"Error occurred in {GetType().FullName}: {tmp26.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp26, tmp27);
          else
            Console.Error.WriteLine(tmp27);
          var tmp28 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OnCreateBattleSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp28.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task OnGetBattleSpaceList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp29 = new InternalStructs.OnGetBattleSpaceList_args();
        await tmp29.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp30 = new InternalStructs.OnGetBattleSpaceList_result();
        try
        {
          tmp30.Success = await _iAsync.OnGetBattleSpaceList(tmp29.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OnGetBattleSpaceList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp30.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp31)
        {
          var tmp32 = $"Error occurred in {GetType().FullName}: {tmp31.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp31, tmp32);
          else
            Console.Error.WriteLine(tmp32);
          var tmp33 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OnGetBattleSpaceList", TMessageType.Exception, seqid), cancellationToken);
          await tmp33.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task OnEnterBattleSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp34 = new InternalStructs.OnEnterBattleSpace_args();
        await tmp34.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp35 = new InternalStructs.OnEnterBattleSpace_result();
        try
        {
          tmp35.Success = await _iAsync.OnEnterBattleSpace(tmp34.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OnEnterBattleSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp35.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp36)
        {
          var tmp37 = $"Error occurred in {GetType().FullName}: {tmp36.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp36, tmp37);
          else
            Console.Error.WriteLine(tmp37);
          var tmp38 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OnEnterBattleSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp38.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task OnReadyBattleSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp39 = new InternalStructs.OnReadyBattleSpace_args();
        await tmp39.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp40 = new InternalStructs.OnReadyBattleSpace_result();
        try
        {
          tmp40.Success = await _iAsync.OnReadyBattleSpace(tmp39.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OnReadyBattleSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp40.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp41)
        {
          var tmp42 = $"Error occurred in {GetType().FullName}: {tmp41.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp41, tmp42);
          else
            Console.Error.WriteLine(tmp42);
          var tmp43 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OnReadyBattleSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp43.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task OnRequsetStartBattleSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp44 = new InternalStructs.OnRequsetStartBattleSpace_args();
        await tmp44.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp45 = new InternalStructs.OnRequsetStartBattleSpace_result();
        try
        {
          tmp45.Success = await _iAsync.OnRequsetStartBattleSpace(tmp44.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OnRequsetStartBattleSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp45.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp46)
        {
          var tmp47 = $"Error occurred in {GetType().FullName}: {tmp46.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp46, tmp47);
          else
            Console.Error.WriteLine(tmp47);
          var tmp48 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OnRequsetStartBattleSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp48.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task OnExitBattleSpace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp49 = new InternalStructs.OnExitBattleSpace_args();
        await tmp49.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp50 = new InternalStructs.OnExitBattleSpace_result();
        try
        {
          tmp50.Success = await _iAsync.OnExitBattleSpace(tmp49.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OnExitBattleSpace", TMessageType.Reply, seqid), cancellationToken); 
          await tmp50.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp51)
        {
          var tmp52 = $"Error occurred in {GetType().FullName}: {tmp51.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp51, tmp52);
          else
            Console.Error.WriteLine(tmp52);
          var tmp53 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OnExitBattleSpace", TMessageType.Exception, seqid), cancellationToken);
          await tmp53.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class OnCreateBattleSpace_args : TBase
      {
        private global::protocols.pubs.CreateBattleSpace _req;

        public global::protocols.pubs.CreateBattleSpace Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public OnCreateBattleSpace_args()
        {
        }

        public OnCreateBattleSpace_args DeepCopy()
        {
          var tmp54 = new OnCreateBattleSpace_args();
          if((Req != null) && __isset.@req)
          {
            tmp54.Req = (global::protocols.pubs.CreateBattleSpace)this.Req.DeepCopy();
          }
          tmp54.__isset.@req = this.__isset.@req;
          return tmp54;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::protocols.pubs.CreateBattleSpace();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp55 = new TStruct("OnCreateBattleSpace_args");
            await oprot.WriteStructBeginAsync(tmp55, cancellationToken);
            var tmp56 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp56.Name = "req";
              tmp56.Type = TType.Struct;
              tmp56.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp56, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnCreateBattleSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp57 = new StringBuilder("OnCreateBattleSpace_args(");
          int tmp58 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp58++) { tmp57.Append(", "); }
            tmp57.Append("Req: ");
            Req.ToString(tmp57);
          }
          tmp57.Append(')');
          return tmp57.ToString();
        }
      }


      public partial class OnCreateBattleSpace_result : TBase
      {
        private global::protocols.pubs.CreateBattleSpaceResp _success;

        public global::protocols.pubs.CreateBattleSpaceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public OnCreateBattleSpace_result()
        {
        }

        public OnCreateBattleSpace_result DeepCopy()
        {
          var tmp59 = new OnCreateBattleSpace_result();
          if((Success != null) && __isset.@success)
          {
            tmp59.Success = (global::protocols.pubs.CreateBattleSpaceResp)this.Success.DeepCopy();
          }
          tmp59.__isset.@success = this.__isset.@success;
          return tmp59;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::protocols.pubs.CreateBattleSpaceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp60 = new TStruct("OnCreateBattleSpace_result");
            await oprot.WriteStructBeginAsync(tmp60, cancellationToken);
            var tmp61 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp61.Name = "Success";
                tmp61.Type = TType.Struct;
                tmp61.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp61, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnCreateBattleSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp62 = new StringBuilder("OnCreateBattleSpace_result(");
          int tmp63 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp63++) { tmp62.Append(", "); }
            tmp62.Append("Success: ");
            Success.ToString(tmp62);
          }
          tmp62.Append(')');
          return tmp62.ToString();
        }
      }


      public partial class OnGetBattleSpaceList_args : TBase
      {
        private global::protocols.pubs.GetBattleSpaceList _req;

        public global::protocols.pubs.GetBattleSpaceList Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public OnGetBattleSpaceList_args()
        {
        }

        public OnGetBattleSpaceList_args DeepCopy()
        {
          var tmp64 = new OnGetBattleSpaceList_args();
          if((Req != null) && __isset.@req)
          {
            tmp64.Req = (global::protocols.pubs.GetBattleSpaceList)this.Req.DeepCopy();
          }
          tmp64.__isset.@req = this.__isset.@req;
          return tmp64;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::protocols.pubs.GetBattleSpaceList();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp65 = new TStruct("OnGetBattleSpaceList_args");
            await oprot.WriteStructBeginAsync(tmp65, cancellationToken);
            var tmp66 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp66.Name = "req";
              tmp66.Type = TType.Struct;
              tmp66.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp66, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnGetBattleSpaceList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp67 = new StringBuilder("OnGetBattleSpaceList_args(");
          int tmp68 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp68++) { tmp67.Append(", "); }
            tmp67.Append("Req: ");
            Req.ToString(tmp67);
          }
          tmp67.Append(')');
          return tmp67.ToString();
        }
      }


      public partial class OnGetBattleSpaceList_result : TBase
      {
        private global::protocols.pubs.GetBattleSpaceListResp _success;

        public global::protocols.pubs.GetBattleSpaceListResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public OnGetBattleSpaceList_result()
        {
        }

        public OnGetBattleSpaceList_result DeepCopy()
        {
          var tmp69 = new OnGetBattleSpaceList_result();
          if((Success != null) && __isset.@success)
          {
            tmp69.Success = (global::protocols.pubs.GetBattleSpaceListResp)this.Success.DeepCopy();
          }
          tmp69.__isset.@success = this.__isset.@success;
          return tmp69;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::protocols.pubs.GetBattleSpaceListResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp70 = new TStruct("OnGetBattleSpaceList_result");
            await oprot.WriteStructBeginAsync(tmp70, cancellationToken);
            var tmp71 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp71.Name = "Success";
                tmp71.Type = TType.Struct;
                tmp71.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnGetBattleSpaceList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp72 = new StringBuilder("OnGetBattleSpaceList_result(");
          int tmp73 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp73++) { tmp72.Append(", "); }
            tmp72.Append("Success: ");
            Success.ToString(tmp72);
          }
          tmp72.Append(')');
          return tmp72.ToString();
        }
      }


      public partial class OnEnterBattleSpace_args : TBase
      {
        private global::protocols.pubs.EnterBattleSpace _req;

        public global::protocols.pubs.EnterBattleSpace Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public OnEnterBattleSpace_args()
        {
        }

        public OnEnterBattleSpace_args DeepCopy()
        {
          var tmp74 = new OnEnterBattleSpace_args();
          if((Req != null) && __isset.@req)
          {
            tmp74.Req = (global::protocols.pubs.EnterBattleSpace)this.Req.DeepCopy();
          }
          tmp74.__isset.@req = this.__isset.@req;
          return tmp74;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::protocols.pubs.EnterBattleSpace();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp75 = new TStruct("OnEnterBattleSpace_args");
            await oprot.WriteStructBeginAsync(tmp75, cancellationToken);
            var tmp76 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp76.Name = "req";
              tmp76.Type = TType.Struct;
              tmp76.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp76, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnEnterBattleSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp77 = new StringBuilder("OnEnterBattleSpace_args(");
          int tmp78 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp78++) { tmp77.Append(", "); }
            tmp77.Append("Req: ");
            Req.ToString(tmp77);
          }
          tmp77.Append(')');
          return tmp77.ToString();
        }
      }


      public partial class OnEnterBattleSpace_result : TBase
      {
        private global::protocols.pubs.EnterBattleSpaceResp _success;

        public global::protocols.pubs.EnterBattleSpaceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public OnEnterBattleSpace_result()
        {
        }

        public OnEnterBattleSpace_result DeepCopy()
        {
          var tmp79 = new OnEnterBattleSpace_result();
          if((Success != null) && __isset.@success)
          {
            tmp79.Success = (global::protocols.pubs.EnterBattleSpaceResp)this.Success.DeepCopy();
          }
          tmp79.__isset.@success = this.__isset.@success;
          return tmp79;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::protocols.pubs.EnterBattleSpaceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp80 = new TStruct("OnEnterBattleSpace_result");
            await oprot.WriteStructBeginAsync(tmp80, cancellationToken);
            var tmp81 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp81.Name = "Success";
                tmp81.Type = TType.Struct;
                tmp81.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp81, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnEnterBattleSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp82 = new StringBuilder("OnEnterBattleSpace_result(");
          int tmp83 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp83++) { tmp82.Append(", "); }
            tmp82.Append("Success: ");
            Success.ToString(tmp82);
          }
          tmp82.Append(')');
          return tmp82.ToString();
        }
      }


      public partial class OnReadyBattleSpace_args : TBase
      {
        private global::protocols.pubs.ReadyBattleSpace _req;

        public global::protocols.pubs.ReadyBattleSpace Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public OnReadyBattleSpace_args()
        {
        }

        public OnReadyBattleSpace_args DeepCopy()
        {
          var tmp84 = new OnReadyBattleSpace_args();
          if((Req != null) && __isset.@req)
          {
            tmp84.Req = (global::protocols.pubs.ReadyBattleSpace)this.Req.DeepCopy();
          }
          tmp84.__isset.@req = this.__isset.@req;
          return tmp84;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::protocols.pubs.ReadyBattleSpace();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp85 = new TStruct("OnReadyBattleSpace_args");
            await oprot.WriteStructBeginAsync(tmp85, cancellationToken);
            var tmp86 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp86.Name = "req";
              tmp86.Type = TType.Struct;
              tmp86.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp86, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnReadyBattleSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp87 = new StringBuilder("OnReadyBattleSpace_args(");
          int tmp88 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp88++) { tmp87.Append(", "); }
            tmp87.Append("Req: ");
            Req.ToString(tmp87);
          }
          tmp87.Append(')');
          return tmp87.ToString();
        }
      }


      public partial class OnReadyBattleSpace_result : TBase
      {
        private global::protocols.pubs.ReadyBattleSpaceResp _success;

        public global::protocols.pubs.ReadyBattleSpaceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public OnReadyBattleSpace_result()
        {
        }

        public OnReadyBattleSpace_result DeepCopy()
        {
          var tmp89 = new OnReadyBattleSpace_result();
          if((Success != null) && __isset.@success)
          {
            tmp89.Success = (global::protocols.pubs.ReadyBattleSpaceResp)this.Success.DeepCopy();
          }
          tmp89.__isset.@success = this.__isset.@success;
          return tmp89;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::protocols.pubs.ReadyBattleSpaceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp90 = new TStruct("OnReadyBattleSpace_result");
            await oprot.WriteStructBeginAsync(tmp90, cancellationToken);
            var tmp91 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp91.Name = "Success";
                tmp91.Type = TType.Struct;
                tmp91.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp91, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnReadyBattleSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp92 = new StringBuilder("OnReadyBattleSpace_result(");
          int tmp93 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp93++) { tmp92.Append(", "); }
            tmp92.Append("Success: ");
            Success.ToString(tmp92);
          }
          tmp92.Append(')');
          return tmp92.ToString();
        }
      }


      public partial class OnRequsetStartBattleSpace_args : TBase
      {
        private global::protocols.pubs.RequsetStartBattleSpace _req;

        public global::protocols.pubs.RequsetStartBattleSpace Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public OnRequsetStartBattleSpace_args()
        {
        }

        public OnRequsetStartBattleSpace_args DeepCopy()
        {
          var tmp94 = new OnRequsetStartBattleSpace_args();
          if((Req != null) && __isset.@req)
          {
            tmp94.Req = (global::protocols.pubs.RequsetStartBattleSpace)this.Req.DeepCopy();
          }
          tmp94.__isset.@req = this.__isset.@req;
          return tmp94;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::protocols.pubs.RequsetStartBattleSpace();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp95 = new TStruct("OnRequsetStartBattleSpace_args");
            await oprot.WriteStructBeginAsync(tmp95, cancellationToken);
            var tmp96 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp96.Name = "req";
              tmp96.Type = TType.Struct;
              tmp96.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp96, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnRequsetStartBattleSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp97 = new StringBuilder("OnRequsetStartBattleSpace_args(");
          int tmp98 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp98++) { tmp97.Append(", "); }
            tmp97.Append("Req: ");
            Req.ToString(tmp97);
          }
          tmp97.Append(')');
          return tmp97.ToString();
        }
      }


      public partial class OnRequsetStartBattleSpace_result : TBase
      {
        private global::protocols.pubs.RequsetStartBattleSpaceResp _success;

        public global::protocols.pubs.RequsetStartBattleSpaceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public OnRequsetStartBattleSpace_result()
        {
        }

        public OnRequsetStartBattleSpace_result DeepCopy()
        {
          var tmp99 = new OnRequsetStartBattleSpace_result();
          if((Success != null) && __isset.@success)
          {
            tmp99.Success = (global::protocols.pubs.RequsetStartBattleSpaceResp)this.Success.DeepCopy();
          }
          tmp99.__isset.@success = this.__isset.@success;
          return tmp99;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::protocols.pubs.RequsetStartBattleSpaceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp100 = new TStruct("OnRequsetStartBattleSpace_result");
            await oprot.WriteStructBeginAsync(tmp100, cancellationToken);
            var tmp101 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp101.Name = "Success";
                tmp101.Type = TType.Struct;
                tmp101.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp101, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnRequsetStartBattleSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp102 = new StringBuilder("OnRequsetStartBattleSpace_result(");
          int tmp103 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp103++) { tmp102.Append(", "); }
            tmp102.Append("Success: ");
            Success.ToString(tmp102);
          }
          tmp102.Append(')');
          return tmp102.ToString();
        }
      }


      public partial class OnExitBattleSpace_args : TBase
      {
        private global::protocols.pubs.ExitBattleSpace _req;

        public global::protocols.pubs.ExitBattleSpace Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public OnExitBattleSpace_args()
        {
        }

        public OnExitBattleSpace_args DeepCopy()
        {
          var tmp104 = new OnExitBattleSpace_args();
          if((Req != null) && __isset.@req)
          {
            tmp104.Req = (global::protocols.pubs.ExitBattleSpace)this.Req.DeepCopy();
          }
          tmp104.__isset.@req = this.__isset.@req;
          return tmp104;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::protocols.pubs.ExitBattleSpace();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp105 = new TStruct("OnExitBattleSpace_args");
            await oprot.WriteStructBeginAsync(tmp105, cancellationToken);
            var tmp106 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp106.Name = "req";
              tmp106.Type = TType.Struct;
              tmp106.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp106, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnExitBattleSpace_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp107 = new StringBuilder("OnExitBattleSpace_args(");
          int tmp108 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp108++) { tmp107.Append(", "); }
            tmp107.Append("Req: ");
            Req.ToString(tmp107);
          }
          tmp107.Append(')');
          return tmp107.ToString();
        }
      }


      public partial class OnExitBattleSpace_result : TBase
      {
        private global::protocols.pubs.ExitBattleSpaceResp _success;

        public global::protocols.pubs.ExitBattleSpaceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public OnExitBattleSpace_result()
        {
        }

        public OnExitBattleSpace_result DeepCopy()
        {
          var tmp109 = new OnExitBattleSpace_result();
          if((Success != null) && __isset.@success)
          {
            tmp109.Success = (global::protocols.pubs.ExitBattleSpaceResp)this.Success.DeepCopy();
          }
          tmp109.__isset.@success = this.__isset.@success;
          return tmp109;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::protocols.pubs.ExitBattleSpaceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp110 = new TStruct("OnExitBattleSpace_result");
            await oprot.WriteStructBeginAsync(tmp110, cancellationToken);
            var tmp111 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp111.Name = "Success";
                tmp111.Type = TType.Struct;
                tmp111.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp111, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OnExitBattleSpace_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp112 = new StringBuilder("OnExitBattleSpace_result(");
          int tmp113 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp113++) { tmp112.Append(", "); }
            tmp112.Append("Success: ");
            Success.ToString(tmp112);
          }
          tmp112.Append(')');
          return tmp112.ToString();
        }
      }

    }

  }
}
