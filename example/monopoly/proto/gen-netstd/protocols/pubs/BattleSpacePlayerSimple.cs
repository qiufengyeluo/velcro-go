/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace protocols.pubs
{

  public partial class BattleSpacePlayerSimple : TBase
  {
    private string _display;
    private int _pos;

    public string Display
    {
      get
      {
        return _display;
      }
      set
      {
        __isset.@display = true;
        this._display = value;
      }
    }

    public int Pos
    {
      get
      {
        return _pos;
      }
      set
      {
        __isset.@pos = true;
        this._pos = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool @display;
      public bool @pos;
    }

    public BattleSpacePlayerSimple()
    {
    }

    public BattleSpacePlayerSimple DeepCopy()
    {
      var tmp10 = new BattleSpacePlayerSimple();
      if((Display != null) && __isset.@display)
      {
        tmp10.Display = this.Display;
      }
      tmp10.__isset.@display = this.__isset.@display;
      if(__isset.@pos)
      {
        tmp10.Pos = this.Pos;
      }
      tmp10.__isset.@pos = this.__isset.@pos;
      return tmp10;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Display = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Pos = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp11 = new TStruct("BattleSpacePlayerSimple");
        await oprot.WriteStructBeginAsync(tmp11, cancellationToken);
        var tmp12 = new TField();
        if((Display != null) && __isset.@display)
        {
          tmp12.Name = "display";
          tmp12.Type = TType.String;
          tmp12.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
          await oprot.WriteStringAsync(Display, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.@pos)
        {
          tmp12.Name = "pos";
          tmp12.Type = TType.I32;
          tmp12.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
          await oprot.WriteI32Async(Pos, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BattleSpacePlayerSimple other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.@display == other.__isset.@display) && ((!__isset.@display) || (global::System.Object.Equals(Display, other.Display))))
        && ((__isset.@pos == other.__isset.@pos) && ((!__isset.@pos) || (global::System.Object.Equals(Pos, other.Pos))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Display != null) && __isset.@display)
        {
          hashcode = (hashcode * 397) + Display.GetHashCode();
        }
        if(__isset.@pos)
        {
          hashcode = (hashcode * 397) + Pos.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp13 = new StringBuilder("BattleSpacePlayerSimple(");
      int tmp14 = 0;
      if((Display != null) && __isset.@display)
      {
        if(0 < tmp14++) { tmp13.Append(", "); }
        tmp13.Append("Display: ");
        Display.ToString(tmp13);
      }
      if(__isset.@pos)
      {
        if(0 < tmp14++) { tmp13.Append(", "); }
        tmp13.Append("Pos: ");
        Pos.ToString(tmp13);
      }
      tmp13.Append(')');
      return tmp13.ToString();
    }
  }

}
