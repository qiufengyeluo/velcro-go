/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace protocols.pubs
{

  public partial class SignInResp : TBase
  {
    private string _Uid;
    private string _DisplayName;
    private Dictionary<string, string> _Externs;

    public string Uid
    {
      get
      {
        return _Uid;
      }
      set
      {
        __isset.Uid = true;
        this._Uid = value;
      }
    }

    public string DisplayName
    {
      get
      {
        return _DisplayName;
      }
      set
      {
        __isset.DisplayName = true;
        this._DisplayName = value;
      }
    }

    public Dictionary<string, string> Externs
    {
      get
      {
        return _Externs;
      }
      set
      {
        __isset.Externs = true;
        this._Externs = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Uid;
      public bool DisplayName;
      public bool Externs;
    }

    public SignInResp()
    {
    }

    public SignInResp DeepCopy()
    {
      var tmp5 = new SignInResp();
      if((Uid != null) && __isset.Uid)
      {
        tmp5.Uid = this.Uid;
      }
      tmp5.__isset.Uid = this.__isset.Uid;
      if((DisplayName != null) && __isset.DisplayName)
      {
        tmp5.DisplayName = this.DisplayName;
      }
      tmp5.__isset.DisplayName = this.__isset.DisplayName;
      if((Externs != null) && __isset.Externs)
      {
        tmp5.Externs = this.Externs.DeepCopy();
      }
      tmp5.__isset.Externs = this.__isset.Externs;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Uid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                DisplayName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  var _map6 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Externs = new Dictionary<string, string>(_map6.Count);
                  for(int _i7 = 0; _i7 < _map6.Count; ++_i7)
                  {
                    string _key8;
                    string _val9;
                    _key8 = await iprot.ReadStringAsync(cancellationToken);
                    _val9 = await iprot.ReadStringAsync(cancellationToken);
                    Externs[_key8] = _val9;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp10 = new TStruct("SignInResp");
        await oprot.WriteStructBeginAsync(tmp10, cancellationToken);
        var tmp11 = new TField();
        if((Uid != null) && __isset.Uid)
        {
          tmp11.Name = "Uid";
          tmp11.Type = TType.String;
          tmp11.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp11, cancellationToken);
          await oprot.WriteStringAsync(Uid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DisplayName != null) && __isset.DisplayName)
        {
          tmp11.Name = "DisplayName";
          tmp11.Type = TType.String;
          tmp11.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp11, cancellationToken);
          await oprot.WriteStringAsync(DisplayName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Externs != null) && __isset.Externs)
        {
          tmp11.Name = "Externs";
          tmp11.Type = TType.Map;
          tmp11.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp11, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Externs.Count), cancellationToken);
          foreach (string _iter12 in Externs.Keys)
          {
            await oprot.WriteStringAsync(_iter12, cancellationToken);
            await oprot.WriteStringAsync(Externs[_iter12], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SignInResp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Uid == other.__isset.Uid) && ((!__isset.Uid) || (global::System.Object.Equals(Uid, other.Uid))))
        && ((__isset.DisplayName == other.__isset.DisplayName) && ((!__isset.DisplayName) || (global::System.Object.Equals(DisplayName, other.DisplayName))))
        && ((__isset.Externs == other.__isset.Externs) && ((!__isset.Externs) || (TCollections.Equals(Externs, other.Externs))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Uid != null) && __isset.Uid)
        {
          hashcode = (hashcode * 397) + Uid.GetHashCode();
        }
        if((DisplayName != null) && __isset.DisplayName)
        {
          hashcode = (hashcode * 397) + DisplayName.GetHashCode();
        }
        if((Externs != null) && __isset.Externs)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Externs);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp13 = new StringBuilder("SignInResp(");
      int tmp14 = 0;
      if((Uid != null) && __isset.Uid)
      {
        if(0 < tmp14++) { tmp13.Append(", "); }
        tmp13.Append("Uid: ");
        Uid.ToString(tmp13);
      }
      if((DisplayName != null) && __isset.DisplayName)
      {
        if(0 < tmp14++) { tmp13.Append(", "); }
        tmp13.Append("DisplayName: ");
        DisplayName.ToString(tmp13);
      }
      if((Externs != null) && __isset.Externs)
      {
        if(0 < tmp14++) { tmp13.Append(", "); }
        tmp13.Append("Externs: ");
        Externs.ToString(tmp13);
      }
      tmp13.Append(')');
      return tmp13.ToString();
    }
  }

}
