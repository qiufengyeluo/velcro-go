/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace protocols.pubs
{

  public partial class BattleSpaceData : TBase
  {
    private string _spaceId;
    private string _mapURI;
    private string _masterUid;
    private long _starttime;
    private string _state;
    private List<global::protocols.pubs.BattleSpacePlayer> _players;

    public string SpaceId
    {
      get
      {
        return _spaceId;
      }
      set
      {
        __isset.spaceId = true;
        this._spaceId = value;
      }
    }

    public string MapURI
    {
      get
      {
        return _mapURI;
      }
      set
      {
        __isset.mapURI = true;
        this._mapURI = value;
      }
    }

    public string MasterUid
    {
      get
      {
        return _masterUid;
      }
      set
      {
        __isset.masterUid = true;
        this._masterUid = value;
      }
    }

    public long Starttime
    {
      get
      {
        return _starttime;
      }
      set
      {
        __isset.@starttime = true;
        this._starttime = value;
      }
    }

    public string State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.@state = true;
        this._state = value;
      }
    }

    public List<global::protocols.pubs.BattleSpacePlayer> Players
    {
      get
      {
        return _players;
      }
      set
      {
        __isset.@players = true;
        this._players = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool spaceId;
      public bool mapURI;
      public bool masterUid;
      public bool @starttime;
      public bool @state;
      public bool @players;
    }

    public BattleSpaceData()
    {
    }

    public BattleSpaceData DeepCopy()
    {
      var tmp29 = new BattleSpaceData();
      if((SpaceId != null) && __isset.spaceId)
      {
        tmp29.SpaceId = this.SpaceId;
      }
      tmp29.__isset.spaceId = this.__isset.spaceId;
      if((MapURI != null) && __isset.mapURI)
      {
        tmp29.MapURI = this.MapURI;
      }
      tmp29.__isset.mapURI = this.__isset.mapURI;
      if((MasterUid != null) && __isset.masterUid)
      {
        tmp29.MasterUid = this.MasterUid;
      }
      tmp29.__isset.masterUid = this.__isset.masterUid;
      if(__isset.@starttime)
      {
        tmp29.Starttime = this.Starttime;
      }
      tmp29.__isset.@starttime = this.__isset.@starttime;
      if((State != null) && __isset.@state)
      {
        tmp29.State = this.State;
      }
      tmp29.__isset.@state = this.__isset.@state;
      if((Players != null) && __isset.@players)
      {
        tmp29.Players = this.Players.DeepCopy();
      }
      tmp29.__isset.@players = this.__isset.@players;
      return tmp29;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                SpaceId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                MapURI = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                MasterUid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Starttime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                State = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.List)
              {
                {
                  var _list30 = await iprot.ReadListBeginAsync(cancellationToken);
                  Players = new List<global::protocols.pubs.BattleSpacePlayer>(_list30.Count);
                  for(int _i31 = 0; _i31 < _list30.Count; ++_i31)
                  {
                    global::protocols.pubs.BattleSpacePlayer _elem32;
                    _elem32 = new global::protocols.pubs.BattleSpacePlayer();
                    await _elem32.ReadAsync(iprot, cancellationToken);
                    Players.Add(_elem32);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp33 = new TStruct("BattleSpaceData");
        await oprot.WriteStructBeginAsync(tmp33, cancellationToken);
        var tmp34 = new TField();
        if((SpaceId != null) && __isset.spaceId)
        {
          tmp34.Name = "spaceId";
          tmp34.Type = TType.String;
          tmp34.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp34, cancellationToken);
          await oprot.WriteStringAsync(SpaceId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MapURI != null) && __isset.mapURI)
        {
          tmp34.Name = "mapURI";
          tmp34.Type = TType.String;
          tmp34.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp34, cancellationToken);
          await oprot.WriteStringAsync(MapURI, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MasterUid != null) && __isset.masterUid)
        {
          tmp34.Name = "masterUid";
          tmp34.Type = TType.String;
          tmp34.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp34, cancellationToken);
          await oprot.WriteStringAsync(MasterUid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.@starttime)
        {
          tmp34.Name = "starttime";
          tmp34.Type = TType.I64;
          tmp34.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp34, cancellationToken);
          await oprot.WriteI64Async(Starttime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((State != null) && __isset.@state)
        {
          tmp34.Name = "state";
          tmp34.Type = TType.String;
          tmp34.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp34, cancellationToken);
          await oprot.WriteStringAsync(State, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Players != null) && __isset.@players)
        {
          tmp34.Name = "players";
          tmp34.Type = TType.List;
          tmp34.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp34, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Players.Count), cancellationToken);
          foreach (global::protocols.pubs.BattleSpacePlayer _iter35 in Players)
          {
            await _iter35.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BattleSpaceData other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.spaceId == other.__isset.spaceId) && ((!__isset.spaceId) || (global::System.Object.Equals(SpaceId, other.SpaceId))))
        && ((__isset.mapURI == other.__isset.mapURI) && ((!__isset.mapURI) || (global::System.Object.Equals(MapURI, other.MapURI))))
        && ((__isset.masterUid == other.__isset.masterUid) && ((!__isset.masterUid) || (global::System.Object.Equals(MasterUid, other.MasterUid))))
        && ((__isset.@starttime == other.__isset.@starttime) && ((!__isset.@starttime) || (global::System.Object.Equals(Starttime, other.Starttime))))
        && ((__isset.@state == other.__isset.@state) && ((!__isset.@state) || (global::System.Object.Equals(State, other.State))))
        && ((__isset.@players == other.__isset.@players) && ((!__isset.@players) || (TCollections.Equals(Players, other.Players))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((SpaceId != null) && __isset.spaceId)
        {
          hashcode = (hashcode * 397) + SpaceId.GetHashCode();
        }
        if((MapURI != null) && __isset.mapURI)
        {
          hashcode = (hashcode * 397) + MapURI.GetHashCode();
        }
        if((MasterUid != null) && __isset.masterUid)
        {
          hashcode = (hashcode * 397) + MasterUid.GetHashCode();
        }
        if(__isset.@starttime)
        {
          hashcode = (hashcode * 397) + Starttime.GetHashCode();
        }
        if((State != null) && __isset.@state)
        {
          hashcode = (hashcode * 397) + State.GetHashCode();
        }
        if((Players != null) && __isset.@players)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Players);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp36 = new StringBuilder("BattleSpaceData(");
      int tmp37 = 0;
      if((SpaceId != null) && __isset.spaceId)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("SpaceId: ");
        SpaceId.ToString(tmp36);
      }
      if((MapURI != null) && __isset.mapURI)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("MapURI: ");
        MapURI.ToString(tmp36);
      }
      if((MasterUid != null) && __isset.masterUid)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("MasterUid: ");
        MasterUid.ToString(tmp36);
      }
      if(__isset.@starttime)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("Starttime: ");
        Starttime.ToString(tmp36);
      }
      if((State != null) && __isset.@state)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("State: ");
        State.ToString(tmp36);
      }
      if((Players != null) && __isset.@players)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("Players: ");
        Players.ToString(tmp36);
      }
      tmp36.Append(')');
      return tmp36.ToString();
    }
  }

}
