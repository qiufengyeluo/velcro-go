/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace protocols.pubs
{

  public partial class GetBattleSpaceListResp : TBase
  {
    private int _start;
    private int _count;
    private List<global::protocols.pubs.BattleSpaceDataSimple> _spaces;

    public int Start
    {
      get
      {
        return _start;
      }
      set
      {
        __isset.@start = true;
        this._start = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.@count = true;
        this._count = value;
      }
    }

    public List<global::protocols.pubs.BattleSpaceDataSimple> Spaces
    {
      get
      {
        return _spaces;
      }
      set
      {
        __isset.@spaces = true;
        this._spaces = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool @start;
      public bool @count;
      public bool @spaces;
    }

    public GetBattleSpaceListResp()
    {
    }

    public GetBattleSpaceListResp DeepCopy()
    {
      var tmp43 = new GetBattleSpaceListResp();
      if(__isset.@start)
      {
        tmp43.Start = this.Start;
      }
      tmp43.__isset.@start = this.__isset.@start;
      if(__isset.@count)
      {
        tmp43.Count = this.Count;
      }
      tmp43.__isset.@count = this.__isset.@count;
      if((Spaces != null) && __isset.@spaces)
      {
        tmp43.Spaces = this.Spaces.DeepCopy();
      }
      tmp43.__isset.@spaces = this.__isset.@spaces;
      return tmp43;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Start = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Count = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  var _list44 = await iprot.ReadListBeginAsync(cancellationToken);
                  Spaces = new List<global::protocols.pubs.BattleSpaceDataSimple>(_list44.Count);
                  for(int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    global::protocols.pubs.BattleSpaceDataSimple _elem46;
                    _elem46 = new global::protocols.pubs.BattleSpaceDataSimple();
                    await _elem46.ReadAsync(iprot, cancellationToken);
                    Spaces.Add(_elem46);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp47 = new TStruct("GetBattleSpaceListResp");
        await oprot.WriteStructBeginAsync(tmp47, cancellationToken);
        var tmp48 = new TField();
        if(__isset.@start)
        {
          tmp48.Name = "start";
          tmp48.Type = TType.I32;
          tmp48.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp48, cancellationToken);
          await oprot.WriteI32Async(Start, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.@count)
        {
          tmp48.Name = "count";
          tmp48.Type = TType.I32;
          tmp48.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp48, cancellationToken);
          await oprot.WriteI32Async(Count, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Spaces != null) && __isset.@spaces)
        {
          tmp48.Name = "spaces";
          tmp48.Type = TType.List;
          tmp48.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp48, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Spaces.Count), cancellationToken);
          foreach (global::protocols.pubs.BattleSpaceDataSimple _iter49 in Spaces)
          {
            await _iter49.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is GetBattleSpaceListResp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.@start == other.__isset.@start) && ((!__isset.@start) || (global::System.Object.Equals(Start, other.Start))))
        && ((__isset.@count == other.__isset.@count) && ((!__isset.@count) || (global::System.Object.Equals(Count, other.Count))))
        && ((__isset.@spaces == other.__isset.@spaces) && ((!__isset.@spaces) || (TCollections.Equals(Spaces, other.Spaces))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.@start)
        {
          hashcode = (hashcode * 397) + Start.GetHashCode();
        }
        if(__isset.@count)
        {
          hashcode = (hashcode * 397) + Count.GetHashCode();
        }
        if((Spaces != null) && __isset.@spaces)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Spaces);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp50 = new StringBuilder("GetBattleSpaceListResp(");
      int tmp51 = 0;
      if(__isset.@start)
      {
        if(0 < tmp51++) { tmp50.Append(", "); }
        tmp50.Append("Start: ");
        Start.ToString(tmp50);
      }
      if(__isset.@count)
      {
        if(0 < tmp51++) { tmp50.Append(", "); }
        tmp50.Append("Count: ");
        Count.ToString(tmp50);
      }
      if((Spaces != null) && __isset.@spaces)
      {
        if(0 < tmp51++) { tmp50.Append(", "); }
        tmp50.Append("Spaces: ");
        Spaces.ToString(tmp50);
      }
      tmp50.Append(')');
      return tmp50.ToString();
    }
  }

}
