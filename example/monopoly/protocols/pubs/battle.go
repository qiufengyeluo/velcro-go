// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package pubs

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - MapURI
//  - MaxCount
type CreateBattleSpace struct {
  MapURI string `thrift:"mapURI,1" db:"mapURI" json:"mapURI"`
  MaxCount int32 `thrift:"maxCount,2" db:"maxCount" json:"maxCount"`
}

func NewCreateBattleSpace() *CreateBattleSpace {
  return &CreateBattleSpace{}
}


func (p *CreateBattleSpace) GetMapURI() string {
  return p.MapURI
}

func (p *CreateBattleSpace) GetMaxCount() int32 {
  return p.MaxCount
}
func (p *CreateBattleSpace) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateBattleSpace)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MapURI = v
}
  return nil
}

func (p *CreateBattleSpace)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxCount = v
}
  return nil
}

func (p *CreateBattleSpace) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateBattleSpace"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateBattleSpace) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mapURI", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mapURI: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MapURI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mapURI (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mapURI: ", p), err) }
  return err
}

func (p *CreateBattleSpace) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxCount", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maxCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maxCount: ", p), err) }
  return err
}

func (p *CreateBattleSpace) Equals(other *CreateBattleSpace) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MapURI != other.MapURI { return false }
  if p.MaxCount != other.MaxCount { return false }
  return true
}

func (p *CreateBattleSpace) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateBattleSpace(%+v)", *p)
}

func (p *CreateBattleSpace) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
//  - MapURI
type CreateBattleSpaceResp struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
  MapURI string `thrift:"mapURI,2" db:"mapURI" json:"mapURI"`
}

func NewCreateBattleSpaceResp() *CreateBattleSpaceResp {
  return &CreateBattleSpaceResp{}
}


func (p *CreateBattleSpaceResp) GetSpaceId() string {
  return p.SpaceId
}

func (p *CreateBattleSpaceResp) GetMapURI() string {
  return p.MapURI
}
func (p *CreateBattleSpaceResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateBattleSpaceResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *CreateBattleSpaceResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MapURI = v
}
  return nil
}

func (p *CreateBattleSpaceResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateBattleSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateBattleSpaceResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *CreateBattleSpaceResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mapURI", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mapURI: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MapURI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mapURI (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mapURI: ", p), err) }
  return err
}

func (p *CreateBattleSpaceResp) Equals(other *CreateBattleSpaceResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  if p.MapURI != other.MapURI { return false }
  return true
}

func (p *CreateBattleSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateBattleSpaceResp(%+v)", *p)
}

func (p *CreateBattleSpaceResp) Validate() error {
  return nil
}
// Attributes:
//  - Display
//  - Pos
type BattleSpacePlayerSimple struct {
  Display string `thrift:"display,1" db:"display" json:"display"`
  Pos int32 `thrift:"pos,2" db:"pos" json:"pos"`
}

func NewBattleSpacePlayerSimple() *BattleSpacePlayerSimple {
  return &BattleSpacePlayerSimple{}
}


func (p *BattleSpacePlayerSimple) GetDisplay() string {
  return p.Display
}

func (p *BattleSpacePlayerSimple) GetPos() int32 {
  return p.Pos
}
func (p *BattleSpacePlayerSimple) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleSpacePlayerSimple)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Display = v
}
  return nil
}

func (p *BattleSpacePlayerSimple)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pos = v
}
  return nil
}

func (p *BattleSpacePlayerSimple) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BattleSpacePlayerSimple"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleSpacePlayerSimple) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "display", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:display: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Display)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.display (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:display: ", p), err) }
  return err
}

func (p *BattleSpacePlayerSimple) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pos: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Pos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pos: ", p), err) }
  return err
}

func (p *BattleSpacePlayerSimple) Equals(other *BattleSpacePlayerSimple) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Display != other.Display { return false }
  if p.Pos != other.Pos { return false }
  return true
}

func (p *BattleSpacePlayerSimple) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleSpacePlayerSimple(%+v)", *p)
}

func (p *BattleSpacePlayerSimple) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
//  - MapURI
//  - MasterUid
//  - MasterIcon
//  - MasterDisplay
//  - MaxCount
//  - Players
type BattleSpaceDataSimple struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
  MapURI string `thrift:"mapURI,2" db:"mapURI" json:"mapURI"`
  MasterUid string `thrift:"masterUid,3" db:"masterUid" json:"masterUid"`
  MasterIcon string `thrift:"masterIcon,4" db:"masterIcon" json:"masterIcon"`
  MasterDisplay string `thrift:"masterDisplay,5" db:"masterDisplay" json:"masterDisplay"`
  MaxCount int32 `thrift:"maxCount,6" db:"maxCount" json:"maxCount"`
  Players []*BattleSpacePlayerSimple `thrift:"players,7" db:"players" json:"players"`
}

func NewBattleSpaceDataSimple() *BattleSpaceDataSimple {
  return &BattleSpaceDataSimple{}
}


func (p *BattleSpaceDataSimple) GetSpaceId() string {
  return p.SpaceId
}

func (p *BattleSpaceDataSimple) GetMapURI() string {
  return p.MapURI
}

func (p *BattleSpaceDataSimple) GetMasterUid() string {
  return p.MasterUid
}

func (p *BattleSpaceDataSimple) GetMasterIcon() string {
  return p.MasterIcon
}

func (p *BattleSpaceDataSimple) GetMasterDisplay() string {
  return p.MasterDisplay
}

func (p *BattleSpaceDataSimple) GetMaxCount() int32 {
  return p.MaxCount
}

func (p *BattleSpaceDataSimple) GetPlayers() []*BattleSpacePlayerSimple {
  return p.Players
}
func (p *BattleSpaceDataSimple) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleSpaceDataSimple)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *BattleSpaceDataSimple)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MapURI = v
}
  return nil
}

func (p *BattleSpaceDataSimple)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MasterUid = v
}
  return nil
}

func (p *BattleSpaceDataSimple)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MasterIcon = v
}
  return nil
}

func (p *BattleSpaceDataSimple)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MasterDisplay = v
}
  return nil
}

func (p *BattleSpaceDataSimple)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxCount = v
}
  return nil
}

func (p *BattleSpaceDataSimple)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BattleSpacePlayerSimple, 0, size)
  p.Players =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &BattleSpacePlayerSimple{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Players = append(p.Players, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BattleSpaceDataSimple) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BattleSpaceDataSimple"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleSpaceDataSimple) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *BattleSpaceDataSimple) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mapURI", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mapURI: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MapURI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mapURI (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mapURI: ", p), err) }
  return err
}

func (p *BattleSpaceDataSimple) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "masterUid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:masterUid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MasterUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.masterUid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:masterUid: ", p), err) }
  return err
}

func (p *BattleSpaceDataSimple) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "masterIcon", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:masterIcon: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MasterIcon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.masterIcon (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:masterIcon: ", p), err) }
  return err
}

func (p *BattleSpaceDataSimple) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "masterDisplay", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:masterDisplay: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MasterDisplay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.masterDisplay (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:masterDisplay: ", p), err) }
  return err
}

func (p *BattleSpaceDataSimple) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxCount", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:maxCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:maxCount: ", p), err) }
  return err
}

func (p *BattleSpaceDataSimple) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "players", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:players: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Players)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Players {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:players: ", p), err) }
  return err
}

func (p *BattleSpaceDataSimple) Equals(other *BattleSpaceDataSimple) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  if p.MapURI != other.MapURI { return false }
  if p.MasterUid != other.MasterUid { return false }
  if p.MasterIcon != other.MasterIcon { return false }
  if p.MasterDisplay != other.MasterDisplay { return false }
  if p.MaxCount != other.MaxCount { return false }
  if len(p.Players) != len(other.Players) { return false }
  for i, _tgt := range p.Players {
    _src1 := other.Players[i]
    if !_tgt.Equals(_src1) { return false }
  }
  return true
}

func (p *BattleSpaceDataSimple) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleSpaceDataSimple(%+v)", *p)
}

func (p *BattleSpaceDataSimple) Validate() error {
  return nil
}
// Attributes:
//  - UID
//  - Display
//  - Icon
//  - Pos
type BattleSpacePlayer struct {
  UID string `thrift:"uid,1" db:"uid" json:"uid"`
  Display string `thrift:"display,2" db:"display" json:"display"`
  Icon string `thrift:"icon,3" db:"icon" json:"icon"`
  Pos int32 `thrift:"pos,4" db:"pos" json:"pos"`
}

func NewBattleSpacePlayer() *BattleSpacePlayer {
  return &BattleSpacePlayer{}
}


func (p *BattleSpacePlayer) GetUID() string {
  return p.UID
}

func (p *BattleSpacePlayer) GetDisplay() string {
  return p.Display
}

func (p *BattleSpacePlayer) GetIcon() string {
  return p.Icon
}

func (p *BattleSpacePlayer) GetPos() int32 {
  return p.Pos
}
func (p *BattleSpacePlayer) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleSpacePlayer)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *BattleSpacePlayer)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Display = v
}
  return nil
}

func (p *BattleSpacePlayer)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Icon = v
}
  return nil
}

func (p *BattleSpacePlayer)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Pos = v
}
  return nil
}

func (p *BattleSpacePlayer) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BattleSpacePlayer"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleSpacePlayer) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *BattleSpacePlayer) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "display", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:display: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Display)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.display (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:display: ", p), err) }
  return err
}

func (p *BattleSpacePlayer) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "icon", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:icon: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Icon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.icon (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:icon: ", p), err) }
  return err
}

func (p *BattleSpacePlayer) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pos", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pos: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Pos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pos (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pos: ", p), err) }
  return err
}

func (p *BattleSpacePlayer) Equals(other *BattleSpacePlayer) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UID != other.UID { return false }
  if p.Display != other.Display { return false }
  if p.Icon != other.Icon { return false }
  if p.Pos != other.Pos { return false }
  return true
}

func (p *BattleSpacePlayer) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleSpacePlayer(%+v)", *p)
}

func (p *BattleSpacePlayer) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
//  - MapURI
//  - MasterUid
//  - Starttime
//  - State
//  - Players
type BattleSpaceData struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
  MapURI string `thrift:"mapURI,2" db:"mapURI" json:"mapURI"`
  MasterUid string `thrift:"masterUid,3" db:"masterUid" json:"masterUid"`
  Starttime int64 `thrift:"starttime,4" db:"starttime" json:"starttime"`
  State string `thrift:"state,5" db:"state" json:"state"`
  Players []*BattleSpacePlayer `thrift:"players,6" db:"players" json:"players"`
}

func NewBattleSpaceData() *BattleSpaceData {
  return &BattleSpaceData{}
}


func (p *BattleSpaceData) GetSpaceId() string {
  return p.SpaceId
}

func (p *BattleSpaceData) GetMapURI() string {
  return p.MapURI
}

func (p *BattleSpaceData) GetMasterUid() string {
  return p.MasterUid
}

func (p *BattleSpaceData) GetStarttime() int64 {
  return p.Starttime
}

func (p *BattleSpaceData) GetState() string {
  return p.State
}

func (p *BattleSpaceData) GetPlayers() []*BattleSpacePlayer {
  return p.Players
}
func (p *BattleSpaceData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleSpaceData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *BattleSpaceData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MapURI = v
}
  return nil
}

func (p *BattleSpaceData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MasterUid = v
}
  return nil
}

func (p *BattleSpaceData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Starttime = v
}
  return nil
}

func (p *BattleSpaceData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *BattleSpaceData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BattleSpacePlayer, 0, size)
  p.Players =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &BattleSpacePlayer{}
    if err := _elem2.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Players = append(p.Players, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BattleSpaceData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BattleSpaceData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleSpaceData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *BattleSpaceData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mapURI", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mapURI: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MapURI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mapURI (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mapURI: ", p), err) }
  return err
}

func (p *BattleSpaceData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "masterUid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:masterUid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MasterUid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.masterUid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:masterUid: ", p), err) }
  return err
}

func (p *BattleSpaceData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "starttime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:starttime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Starttime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.starttime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:starttime: ", p), err) }
  return err
}

func (p *BattleSpaceData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:state: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:state: ", p), err) }
  return err
}

func (p *BattleSpaceData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "players", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:players: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Players)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Players {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:players: ", p), err) }
  return err
}

func (p *BattleSpaceData) Equals(other *BattleSpaceData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  if p.MapURI != other.MapURI { return false }
  if p.MasterUid != other.MasterUid { return false }
  if p.Starttime != other.Starttime { return false }
  if p.State != other.State { return false }
  if len(p.Players) != len(other.Players) { return false }
  for i, _tgt := range p.Players {
    _src3 := other.Players[i]
    if !_tgt.Equals(_src3) { return false }
  }
  return true
}

func (p *BattleSpaceData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleSpaceData(%+v)", *p)
}

func (p *BattleSpaceData) Validate() error {
  return nil
}
// Attributes:
//  - Start
//  - Size
type GetBattleSpaceList struct {
  Start int32 `thrift:"start,1" db:"start" json:"start"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
}

func NewGetBattleSpaceList() *GetBattleSpaceList {
  return &GetBattleSpaceList{}
}


func (p *GetBattleSpaceList) GetStart() int32 {
  return p.Start
}

func (p *GetBattleSpaceList) GetSize() int32 {
  return p.Size
}
func (p *GetBattleSpaceList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetBattleSpaceList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *GetBattleSpaceList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *GetBattleSpaceList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetBattleSpaceList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetBattleSpaceList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start: ", p), err) }
  return err
}

func (p *GetBattleSpaceList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *GetBattleSpaceList) Equals(other *GetBattleSpaceList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Start != other.Start { return false }
  if p.Size != other.Size { return false }
  return true
}

func (p *GetBattleSpaceList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetBattleSpaceList(%+v)", *p)
}

func (p *GetBattleSpaceList) Validate() error {
  return nil
}
// Attributes:
//  - Start
//  - Count
//  - Spaces
type GetBattleSpaceListResp struct {
  Start int32 `thrift:"start,1" db:"start" json:"start"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  Spaces []*BattleSpaceDataSimple `thrift:"spaces,3" db:"spaces" json:"spaces"`
}

func NewGetBattleSpaceListResp() *GetBattleSpaceListResp {
  return &GetBattleSpaceListResp{}
}


func (p *GetBattleSpaceListResp) GetStart() int32 {
  return p.Start
}

func (p *GetBattleSpaceListResp) GetCount() int32 {
  return p.Count
}

func (p *GetBattleSpaceListResp) GetSpaces() []*BattleSpaceDataSimple {
  return p.Spaces
}
func (p *GetBattleSpaceListResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetBattleSpaceListResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *GetBattleSpaceListResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *GetBattleSpaceListResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BattleSpaceDataSimple, 0, size)
  p.Spaces =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &BattleSpaceDataSimple{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Spaces = append(p.Spaces, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetBattleSpaceListResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetBattleSpaceListResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetBattleSpaceListResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start: ", p), err) }
  return err
}

func (p *GetBattleSpaceListResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *GetBattleSpaceListResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaces", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spaces: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Spaces)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Spaces {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spaces: ", p), err) }
  return err
}

func (p *GetBattleSpaceListResp) Equals(other *GetBattleSpaceListResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Start != other.Start { return false }
  if p.Count != other.Count { return false }
  if len(p.Spaces) != len(other.Spaces) { return false }
  for i, _tgt := range p.Spaces {
    _src5 := other.Spaces[i]
    if !_tgt.Equals(_src5) { return false }
  }
  return true
}

func (p *GetBattleSpaceListResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetBattleSpaceListResp(%+v)", *p)
}

func (p *GetBattleSpaceListResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
type EnterBattleSpace struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
}

func NewEnterBattleSpace() *EnterBattleSpace {
  return &EnterBattleSpace{}
}


func (p *EnterBattleSpace) GetSpaceId() string {
  return p.SpaceId
}
func (p *EnterBattleSpace) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EnterBattleSpace)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *EnterBattleSpace) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EnterBattleSpace"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EnterBattleSpace) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *EnterBattleSpace) Equals(other *EnterBattleSpace) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  return true
}

func (p *EnterBattleSpace) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnterBattleSpace(%+v)", *p)
}

func (p *EnterBattleSpace) Validate() error {
  return nil
}
// Attributes:
//  - Space
type EnterBattleSpaceResp struct {
  Space *BattleSpaceData `thrift:"space,1" db:"space" json:"space"`
}

func NewEnterBattleSpaceResp() *EnterBattleSpaceResp {
  return &EnterBattleSpaceResp{}
}

var EnterBattleSpaceResp_Space_DEFAULT *BattleSpaceData
func (p *EnterBattleSpaceResp) GetSpace() *BattleSpaceData {
  if !p.IsSetSpace() {
    return EnterBattleSpaceResp_Space_DEFAULT
  }
return p.Space
}
func (p *EnterBattleSpaceResp) IsSetSpace() bool {
  return p.Space != nil
}

func (p *EnterBattleSpaceResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EnterBattleSpaceResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Space = &BattleSpaceData{}
  if err := p.Space.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Space), err)
  }
  return nil
}

func (p *EnterBattleSpaceResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EnterBattleSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EnterBattleSpaceResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := p.Space.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Space), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *EnterBattleSpaceResp) Equals(other *EnterBattleSpaceResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Space.Equals(other.Space) { return false }
  return true
}

func (p *EnterBattleSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnterBattleSpaceResp(%+v)", *p)
}

func (p *EnterBattleSpaceResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
//  - UID
type ExitBattleSpace struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
  UID string `thrift:"uid,2" db:"uid" json:"uid"`
}

func NewExitBattleSpace() *ExitBattleSpace {
  return &ExitBattleSpace{}
}


func (p *ExitBattleSpace) GetSpaceId() string {
  return p.SpaceId
}

func (p *ExitBattleSpace) GetUID() string {
  return p.UID
}
func (p *ExitBattleSpace) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExitBattleSpace)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *ExitBattleSpace)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *ExitBattleSpace) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExitBattleSpace"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExitBattleSpace) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *ExitBattleSpace) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *ExitBattleSpace) Equals(other *ExitBattleSpace) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  if p.UID != other.UID { return false }
  return true
}

func (p *ExitBattleSpace) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExitBattleSpace(%+v)", *p)
}

func (p *ExitBattleSpace) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
//  - UID
type ExitBattleSpaceResp struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
  UID string `thrift:"uid,2" db:"uid" json:"uid"`
}

func NewExitBattleSpaceResp() *ExitBattleSpaceResp {
  return &ExitBattleSpaceResp{}
}


func (p *ExitBattleSpaceResp) GetSpaceId() string {
  return p.SpaceId
}

func (p *ExitBattleSpaceResp) GetUID() string {
  return p.UID
}
func (p *ExitBattleSpaceResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExitBattleSpaceResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *ExitBattleSpaceResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *ExitBattleSpaceResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExitBattleSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExitBattleSpaceResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *ExitBattleSpaceResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *ExitBattleSpaceResp) Equals(other *ExitBattleSpaceResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  if p.UID != other.UID { return false }
  return true
}

func (p *ExitBattleSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExitBattleSpaceResp(%+v)", *p)
}

func (p *ExitBattleSpaceResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
//  - UID
//  - Ready
type ReadyBattleSpace struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
  UID string `thrift:"uid,2" db:"uid" json:"uid"`
  Ready bool `thrift:"ready,3" db:"ready" json:"ready"`
}

func NewReadyBattleSpace() *ReadyBattleSpace {
  return &ReadyBattleSpace{}
}


func (p *ReadyBattleSpace) GetSpaceId() string {
  return p.SpaceId
}

func (p *ReadyBattleSpace) GetUID() string {
  return p.UID
}

func (p *ReadyBattleSpace) GetReady() bool {
  return p.Ready
}
func (p *ReadyBattleSpace) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadyBattleSpace)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *ReadyBattleSpace)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *ReadyBattleSpace)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ready = v
}
  return nil
}

func (p *ReadyBattleSpace) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadyBattleSpace"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadyBattleSpace) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *ReadyBattleSpace) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *ReadyBattleSpace) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ready", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ready: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ready)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ready (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ready: ", p), err) }
  return err
}

func (p *ReadyBattleSpace) Equals(other *ReadyBattleSpace) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  if p.UID != other.UID { return false }
  if p.Ready != other.Ready { return false }
  return true
}

func (p *ReadyBattleSpace) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadyBattleSpace(%+v)", *p)
}

func (p *ReadyBattleSpace) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
//  - UID
//  - Ready
type ReadyBattleSpaceResp struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
  UID string `thrift:"uid,2" db:"uid" json:"uid"`
  Ready bool `thrift:"ready,3" db:"ready" json:"ready"`
}

func NewReadyBattleSpaceResp() *ReadyBattleSpaceResp {
  return &ReadyBattleSpaceResp{}
}


func (p *ReadyBattleSpaceResp) GetSpaceId() string {
  return p.SpaceId
}

func (p *ReadyBattleSpaceResp) GetUID() string {
  return p.UID
}

func (p *ReadyBattleSpaceResp) GetReady() bool {
  return p.Ready
}
func (p *ReadyBattleSpaceResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadyBattleSpaceResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *ReadyBattleSpaceResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *ReadyBattleSpaceResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ready = v
}
  return nil
}

func (p *ReadyBattleSpaceResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadyBattleSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadyBattleSpaceResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *ReadyBattleSpaceResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *ReadyBattleSpaceResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ready", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ready: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ready)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ready (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ready: ", p), err) }
  return err
}

func (p *ReadyBattleSpaceResp) Equals(other *ReadyBattleSpaceResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  if p.UID != other.UID { return false }
  if p.Ready != other.Ready { return false }
  return true
}

func (p *ReadyBattleSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadyBattleSpaceResp(%+v)", *p)
}

func (p *ReadyBattleSpaceResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
type DissBattleSpaceNotify struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
}

func NewDissBattleSpaceNotify() *DissBattleSpaceNotify {
  return &DissBattleSpaceNotify{}
}


func (p *DissBattleSpaceNotify) GetSpaceId() string {
  return p.SpaceId
}
func (p *DissBattleSpaceNotify) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DissBattleSpaceNotify)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *DissBattleSpaceNotify) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DissBattleSpaceNotify"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DissBattleSpaceNotify) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *DissBattleSpaceNotify) Equals(other *DissBattleSpaceNotify) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  return true
}

func (p *DissBattleSpaceNotify) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DissBattleSpaceNotify(%+v)", *p)
}

func (p *DissBattleSpaceNotify) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
type RequsetStartBattleSpace struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
}

func NewRequsetStartBattleSpace() *RequsetStartBattleSpace {
  return &RequsetStartBattleSpace{}
}


func (p *RequsetStartBattleSpace) GetSpaceId() string {
  return p.SpaceId
}
func (p *RequsetStartBattleSpace) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequsetStartBattleSpace)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *RequsetStartBattleSpace) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RequsetStartBattleSpace"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequsetStartBattleSpace) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *RequsetStartBattleSpace) Equals(other *RequsetStartBattleSpace) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  return true
}

func (p *RequsetStartBattleSpace) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequsetStartBattleSpace(%+v)", *p)
}

func (p *RequsetStartBattleSpace) Validate() error {
  return nil
}
// Attributes:
//  - SpaceId
type RequsetStartBattleSpaceResp struct {
  SpaceId string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
}

func NewRequsetStartBattleSpaceResp() *RequsetStartBattleSpaceResp {
  return &RequsetStartBattleSpaceResp{}
}


func (p *RequsetStartBattleSpaceResp) GetSpaceId() string {
  return p.SpaceId
}
func (p *RequsetStartBattleSpaceResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequsetStartBattleSpaceResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceId = v
}
  return nil
}

func (p *RequsetStartBattleSpaceResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RequsetStartBattleSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequsetStartBattleSpaceResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err) }
  return err
}

func (p *RequsetStartBattleSpaceResp) Equals(other *RequsetStartBattleSpaceResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceId != other.SpaceId { return false }
  return true
}

func (p *RequsetStartBattleSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequsetStartBattleSpaceResp(%+v)", *p)
}

func (p *RequsetStartBattleSpaceResp) Validate() error {
  return nil
}
