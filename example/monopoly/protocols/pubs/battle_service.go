// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package pubs

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type BattleService interface {
  // Parameters:
  //  - Req
  OnCreateBattleSpace(ctx context.Context, req *CreateBattleSpace) (_r *CreateBattleSpaceResp, _err error)
  // Parameters:
  //  - Req
  OnGetBattleSpaceList(ctx context.Context, req *GetBattleSpaceList) (_r *GetBattleSpaceListResp, _err error)
  // Parameters:
  //  - Req
  OnEnterBattleSpace(ctx context.Context, req *EnterBattleSpace) (_r *EnterBattleSpaceResp, _err error)
  // Parameters:
  //  - Req
  OnReadyBattleSpace(ctx context.Context, req *ReadyBattleSpace) (_r *ReadyBattleSpaceResp, _err error)
  // Parameters:
  //  - Req
  OnRequsetStartBattleSpace(ctx context.Context, req *RequsetStartBattleSpace) (_r *RequsetStartBattleSpaceResp, _err error)
  // Parameters:
  //  - Req
  OnExitBattleSpace(ctx context.Context, req *ExitBattleSpace) (_r *ExitBattleSpaceResp, _err error)
}

type BattleServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewBattleServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BattleServiceClient {
  return &BattleServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBattleServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BattleServiceClient {
  return &BattleServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBattleServiceClient(c thrift.TClient) *BattleServiceClient {
  return &BattleServiceClient{
    c: c,
  }
}

func (p *BattleServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *BattleServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *BattleServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *BattleServiceClient) OnCreateBattleSpace(ctx context.Context, req *CreateBattleSpace) (_r *CreateBattleSpaceResp, _err error) {
  var _args0 BattleServiceOnCreateBattleSpaceArgs
  _args0.Req = req
  var _result2 BattleServiceOnCreateBattleSpaceResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "OnCreateBattleSpace", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  if _ret3 := _result2.GetSuccess(); _ret3 != nil {
    return _ret3, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnCreateBattleSpace failed: unknown result")
}

// Parameters:
//  - Req
func (p *BattleServiceClient) OnGetBattleSpaceList(ctx context.Context, req *GetBattleSpaceList) (_r *GetBattleSpaceListResp, _err error) {
  var _args4 BattleServiceOnGetBattleSpaceListArgs
  _args4.Req = req
  var _result6 BattleServiceOnGetBattleSpaceListResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "OnGetBattleSpaceList", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  if _ret7 := _result6.GetSuccess(); _ret7 != nil {
    return _ret7, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnGetBattleSpaceList failed: unknown result")
}

// Parameters:
//  - Req
func (p *BattleServiceClient) OnEnterBattleSpace(ctx context.Context, req *EnterBattleSpace) (_r *EnterBattleSpaceResp, _err error) {
  var _args8 BattleServiceOnEnterBattleSpaceArgs
  _args8.Req = req
  var _result10 BattleServiceOnEnterBattleSpaceResult
  var _meta9 thrift.ResponseMeta
  _meta9, _err = p.Client_().Call(ctx, "OnEnterBattleSpace", &_args8, &_result10)
  p.SetLastResponseMeta_(_meta9)
  if _err != nil {
    return
  }
  if _ret11 := _result10.GetSuccess(); _ret11 != nil {
    return _ret11, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnEnterBattleSpace failed: unknown result")
}

// Parameters:
//  - Req
func (p *BattleServiceClient) OnReadyBattleSpace(ctx context.Context, req *ReadyBattleSpace) (_r *ReadyBattleSpaceResp, _err error) {
  var _args12 BattleServiceOnReadyBattleSpaceArgs
  _args12.Req = req
  var _result14 BattleServiceOnReadyBattleSpaceResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "OnReadyBattleSpace", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  if _ret15 := _result14.GetSuccess(); _ret15 != nil {
    return _ret15, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnReadyBattleSpace failed: unknown result")
}

// Parameters:
//  - Req
func (p *BattleServiceClient) OnRequsetStartBattleSpace(ctx context.Context, req *RequsetStartBattleSpace) (_r *RequsetStartBattleSpaceResp, _err error) {
  var _args16 BattleServiceOnRequsetStartBattleSpaceArgs
  _args16.Req = req
  var _result18 BattleServiceOnRequsetStartBattleSpaceResult
  var _meta17 thrift.ResponseMeta
  _meta17, _err = p.Client_().Call(ctx, "OnRequsetStartBattleSpace", &_args16, &_result18)
  p.SetLastResponseMeta_(_meta17)
  if _err != nil {
    return
  }
  if _ret19 := _result18.GetSuccess(); _ret19 != nil {
    return _ret19, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnRequsetStartBattleSpace failed: unknown result")
}

// Parameters:
//  - Req
func (p *BattleServiceClient) OnExitBattleSpace(ctx context.Context, req *ExitBattleSpace) (_r *ExitBattleSpaceResp, _err error) {
  var _args20 BattleServiceOnExitBattleSpaceArgs
  _args20.Req = req
  var _result22 BattleServiceOnExitBattleSpaceResult
  var _meta21 thrift.ResponseMeta
  _meta21, _err = p.Client_().Call(ctx, "OnExitBattleSpace", &_args20, &_result22)
  p.SetLastResponseMeta_(_meta21)
  if _err != nil {
    return
  }
  if _ret23 := _result22.GetSuccess(); _ret23 != nil {
    return _ret23, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnExitBattleSpace failed: unknown result")
}

type BattleServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BattleService
}

func (p *BattleServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BattleServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BattleServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBattleServiceProcessor(handler BattleService) *BattleServiceProcessor {

  self24 := &BattleServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["OnCreateBattleSpace"] = &battleServiceProcessorOnCreateBattleSpace{handler:handler}
  self24.processorMap["OnGetBattleSpaceList"] = &battleServiceProcessorOnGetBattleSpaceList{handler:handler}
  self24.processorMap["OnEnterBattleSpace"] = &battleServiceProcessorOnEnterBattleSpace{handler:handler}
  self24.processorMap["OnReadyBattleSpace"] = &battleServiceProcessorOnReadyBattleSpace{handler:handler}
  self24.processorMap["OnRequsetStartBattleSpace"] = &battleServiceProcessorOnRequsetStartBattleSpace{handler:handler}
  self24.processorMap["OnExitBattleSpace"] = &battleServiceProcessorOnExitBattleSpace{handler:handler}
return self24
}

func (p *BattleServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x25.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x25

}

type battleServiceProcessorOnCreateBattleSpace struct {
  handler BattleService
}

func (p *battleServiceProcessorOnCreateBattleSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err26 error
  args := BattleServiceOnCreateBattleSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnCreateBattleSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BattleServiceOnCreateBattleSpaceResult{}
  if retval, err2 := p.handler.OnCreateBattleSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc27 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnCreateBattleSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnCreateBattleSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err26 = thrift.WrapTException(err2)
    }
    if err2 := _exc27.Write(ctx, oprot); _write_err26 == nil && err2 != nil {
      _write_err26 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err26 == nil && err2 != nil {
      _write_err26 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err26 == nil && err2 != nil {
      _write_err26 = thrift.WrapTException(err2)
    }
    if _write_err26 != nil {
      return false, thrift.WrapTException(_write_err26)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnCreateBattleSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err26 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err26 == nil && err2 != nil {
    _write_err26 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err26 == nil && err2 != nil {
    _write_err26 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err26 == nil && err2 != nil {
    _write_err26 = thrift.WrapTException(err2)
  }
  if _write_err26 != nil {
    return false, thrift.WrapTException(_write_err26)
  }
  return true, err
}

type battleServiceProcessorOnGetBattleSpaceList struct {
  handler BattleService
}

func (p *battleServiceProcessorOnGetBattleSpaceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err28 error
  args := BattleServiceOnGetBattleSpaceListArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnGetBattleSpaceList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BattleServiceOnGetBattleSpaceListResult{}
  if retval, err2 := p.handler.OnGetBattleSpaceList(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc29 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnGetBattleSpaceList: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnGetBattleSpaceList", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err28 = thrift.WrapTException(err2)
    }
    if err2 := _exc29.Write(ctx, oprot); _write_err28 == nil && err2 != nil {
      _write_err28 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err28 == nil && err2 != nil {
      _write_err28 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err28 == nil && err2 != nil {
      _write_err28 = thrift.WrapTException(err2)
    }
    if _write_err28 != nil {
      return false, thrift.WrapTException(_write_err28)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnGetBattleSpaceList", thrift.REPLY, seqId); err2 != nil {
    _write_err28 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err28 == nil && err2 != nil {
    _write_err28 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err28 == nil && err2 != nil {
    _write_err28 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err28 == nil && err2 != nil {
    _write_err28 = thrift.WrapTException(err2)
  }
  if _write_err28 != nil {
    return false, thrift.WrapTException(_write_err28)
  }
  return true, err
}

type battleServiceProcessorOnEnterBattleSpace struct {
  handler BattleService
}

func (p *battleServiceProcessorOnEnterBattleSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err30 error
  args := BattleServiceOnEnterBattleSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnEnterBattleSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BattleServiceOnEnterBattleSpaceResult{}
  if retval, err2 := p.handler.OnEnterBattleSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc31 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnEnterBattleSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnEnterBattleSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err30 = thrift.WrapTException(err2)
    }
    if err2 := _exc31.Write(ctx, oprot); _write_err30 == nil && err2 != nil {
      _write_err30 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err30 == nil && err2 != nil {
      _write_err30 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err30 == nil && err2 != nil {
      _write_err30 = thrift.WrapTException(err2)
    }
    if _write_err30 != nil {
      return false, thrift.WrapTException(_write_err30)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnEnterBattleSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err30 == nil && err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err30 == nil && err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err30 == nil && err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if _write_err30 != nil {
    return false, thrift.WrapTException(_write_err30)
  }
  return true, err
}

type battleServiceProcessorOnReadyBattleSpace struct {
  handler BattleService
}

func (p *battleServiceProcessorOnReadyBattleSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err32 error
  args := BattleServiceOnReadyBattleSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnReadyBattleSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BattleServiceOnReadyBattleSpaceResult{}
  if retval, err2 := p.handler.OnReadyBattleSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc33 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnReadyBattleSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnReadyBattleSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err32 = thrift.WrapTException(err2)
    }
    if err2 := _exc33.Write(ctx, oprot); _write_err32 == nil && err2 != nil {
      _write_err32 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err32 == nil && err2 != nil {
      _write_err32 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err32 == nil && err2 != nil {
      _write_err32 = thrift.WrapTException(err2)
    }
    if _write_err32 != nil {
      return false, thrift.WrapTException(_write_err32)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnReadyBattleSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err32 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err32 == nil && err2 != nil {
    _write_err32 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err32 == nil && err2 != nil {
    _write_err32 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err32 == nil && err2 != nil {
    _write_err32 = thrift.WrapTException(err2)
  }
  if _write_err32 != nil {
    return false, thrift.WrapTException(_write_err32)
  }
  return true, err
}

type battleServiceProcessorOnRequsetStartBattleSpace struct {
  handler BattleService
}

func (p *battleServiceProcessorOnRequsetStartBattleSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err34 error
  args := BattleServiceOnRequsetStartBattleSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnRequsetStartBattleSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BattleServiceOnRequsetStartBattleSpaceResult{}
  if retval, err2 := p.handler.OnRequsetStartBattleSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc35 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnRequsetStartBattleSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnRequsetStartBattleSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err34 = thrift.WrapTException(err2)
    }
    if err2 := _exc35.Write(ctx, oprot); _write_err34 == nil && err2 != nil {
      _write_err34 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err34 == nil && err2 != nil {
      _write_err34 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err34 == nil && err2 != nil {
      _write_err34 = thrift.WrapTException(err2)
    }
    if _write_err34 != nil {
      return false, thrift.WrapTException(_write_err34)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnRequsetStartBattleSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err34 == nil && err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err34 == nil && err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err34 == nil && err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if _write_err34 != nil {
    return false, thrift.WrapTException(_write_err34)
  }
  return true, err
}

type battleServiceProcessorOnExitBattleSpace struct {
  handler BattleService
}

func (p *battleServiceProcessorOnExitBattleSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err36 error
  args := BattleServiceOnExitBattleSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnExitBattleSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BattleServiceOnExitBattleSpaceResult{}
  if retval, err2 := p.handler.OnExitBattleSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc37 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnExitBattleSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnExitBattleSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err36 = thrift.WrapTException(err2)
    }
    if err2 := _exc37.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
      _write_err36 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
      _write_err36 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
      _write_err36 = thrift.WrapTException(err2)
    }
    if _write_err36 != nil {
      return false, thrift.WrapTException(_write_err36)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnExitBattleSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if _write_err36 != nil {
    return false, thrift.WrapTException(_write_err36)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type BattleServiceOnCreateBattleSpaceArgs struct {
  Req *CreateBattleSpace `thrift:"req,1" db:"req" json:"req"`
}

func NewBattleServiceOnCreateBattleSpaceArgs() *BattleServiceOnCreateBattleSpaceArgs {
  return &BattleServiceOnCreateBattleSpaceArgs{}
}

var BattleServiceOnCreateBattleSpaceArgs_Req_DEFAULT *CreateBattleSpace
func (p *BattleServiceOnCreateBattleSpaceArgs) GetReq() *CreateBattleSpace {
  if !p.IsSetReq() {
    return BattleServiceOnCreateBattleSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *BattleServiceOnCreateBattleSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *BattleServiceOnCreateBattleSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnCreateBattleSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateBattleSpace{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *BattleServiceOnCreateBattleSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnCreateBattleSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnCreateBattleSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *BattleServiceOnCreateBattleSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnCreateBattleSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BattleServiceOnCreateBattleSpaceResult struct {
  Success *CreateBattleSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBattleServiceOnCreateBattleSpaceResult() *BattleServiceOnCreateBattleSpaceResult {
  return &BattleServiceOnCreateBattleSpaceResult{}
}

var BattleServiceOnCreateBattleSpaceResult_Success_DEFAULT *CreateBattleSpaceResp
func (p *BattleServiceOnCreateBattleSpaceResult) GetSuccess() *CreateBattleSpaceResp {
  if !p.IsSetSuccess() {
    return BattleServiceOnCreateBattleSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *BattleServiceOnCreateBattleSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BattleServiceOnCreateBattleSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnCreateBattleSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CreateBattleSpaceResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BattleServiceOnCreateBattleSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnCreateBattleSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnCreateBattleSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BattleServiceOnCreateBattleSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnCreateBattleSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type BattleServiceOnGetBattleSpaceListArgs struct {
  Req *GetBattleSpaceList `thrift:"req,1" db:"req" json:"req"`
}

func NewBattleServiceOnGetBattleSpaceListArgs() *BattleServiceOnGetBattleSpaceListArgs {
  return &BattleServiceOnGetBattleSpaceListArgs{}
}

var BattleServiceOnGetBattleSpaceListArgs_Req_DEFAULT *GetBattleSpaceList
func (p *BattleServiceOnGetBattleSpaceListArgs) GetReq() *GetBattleSpaceList {
  if !p.IsSetReq() {
    return BattleServiceOnGetBattleSpaceListArgs_Req_DEFAULT
  }
return p.Req
}
func (p *BattleServiceOnGetBattleSpaceListArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *BattleServiceOnGetBattleSpaceListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnGetBattleSpaceListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetBattleSpaceList{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *BattleServiceOnGetBattleSpaceListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnGetBattleSpaceList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnGetBattleSpaceListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *BattleServiceOnGetBattleSpaceListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnGetBattleSpaceListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BattleServiceOnGetBattleSpaceListResult struct {
  Success *GetBattleSpaceListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBattleServiceOnGetBattleSpaceListResult() *BattleServiceOnGetBattleSpaceListResult {
  return &BattleServiceOnGetBattleSpaceListResult{}
}

var BattleServiceOnGetBattleSpaceListResult_Success_DEFAULT *GetBattleSpaceListResp
func (p *BattleServiceOnGetBattleSpaceListResult) GetSuccess() *GetBattleSpaceListResp {
  if !p.IsSetSuccess() {
    return BattleServiceOnGetBattleSpaceListResult_Success_DEFAULT
  }
return p.Success
}
func (p *BattleServiceOnGetBattleSpaceListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BattleServiceOnGetBattleSpaceListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnGetBattleSpaceListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetBattleSpaceListResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BattleServiceOnGetBattleSpaceListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnGetBattleSpaceList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnGetBattleSpaceListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BattleServiceOnGetBattleSpaceListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnGetBattleSpaceListResult(%+v)", *p)
}

// Attributes:
//  - Req
type BattleServiceOnEnterBattleSpaceArgs struct {
  Req *EnterBattleSpace `thrift:"req,1" db:"req" json:"req"`
}

func NewBattleServiceOnEnterBattleSpaceArgs() *BattleServiceOnEnterBattleSpaceArgs {
  return &BattleServiceOnEnterBattleSpaceArgs{}
}

var BattleServiceOnEnterBattleSpaceArgs_Req_DEFAULT *EnterBattleSpace
func (p *BattleServiceOnEnterBattleSpaceArgs) GetReq() *EnterBattleSpace {
  if !p.IsSetReq() {
    return BattleServiceOnEnterBattleSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *BattleServiceOnEnterBattleSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *BattleServiceOnEnterBattleSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnEnterBattleSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &EnterBattleSpace{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *BattleServiceOnEnterBattleSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnEnterBattleSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnEnterBattleSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *BattleServiceOnEnterBattleSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnEnterBattleSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BattleServiceOnEnterBattleSpaceResult struct {
  Success *EnterBattleSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBattleServiceOnEnterBattleSpaceResult() *BattleServiceOnEnterBattleSpaceResult {
  return &BattleServiceOnEnterBattleSpaceResult{}
}

var BattleServiceOnEnterBattleSpaceResult_Success_DEFAULT *EnterBattleSpaceResp
func (p *BattleServiceOnEnterBattleSpaceResult) GetSuccess() *EnterBattleSpaceResp {
  if !p.IsSetSuccess() {
    return BattleServiceOnEnterBattleSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *BattleServiceOnEnterBattleSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BattleServiceOnEnterBattleSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnEnterBattleSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &EnterBattleSpaceResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BattleServiceOnEnterBattleSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnEnterBattleSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnEnterBattleSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BattleServiceOnEnterBattleSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnEnterBattleSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type BattleServiceOnReadyBattleSpaceArgs struct {
  Req *ReadyBattleSpace `thrift:"req,1" db:"req" json:"req"`
}

func NewBattleServiceOnReadyBattleSpaceArgs() *BattleServiceOnReadyBattleSpaceArgs {
  return &BattleServiceOnReadyBattleSpaceArgs{}
}

var BattleServiceOnReadyBattleSpaceArgs_Req_DEFAULT *ReadyBattleSpace
func (p *BattleServiceOnReadyBattleSpaceArgs) GetReq() *ReadyBattleSpace {
  if !p.IsSetReq() {
    return BattleServiceOnReadyBattleSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *BattleServiceOnReadyBattleSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *BattleServiceOnReadyBattleSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnReadyBattleSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ReadyBattleSpace{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *BattleServiceOnReadyBattleSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnReadyBattleSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnReadyBattleSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *BattleServiceOnReadyBattleSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnReadyBattleSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BattleServiceOnReadyBattleSpaceResult struct {
  Success *ReadyBattleSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBattleServiceOnReadyBattleSpaceResult() *BattleServiceOnReadyBattleSpaceResult {
  return &BattleServiceOnReadyBattleSpaceResult{}
}

var BattleServiceOnReadyBattleSpaceResult_Success_DEFAULT *ReadyBattleSpaceResp
func (p *BattleServiceOnReadyBattleSpaceResult) GetSuccess() *ReadyBattleSpaceResp {
  if !p.IsSetSuccess() {
    return BattleServiceOnReadyBattleSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *BattleServiceOnReadyBattleSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BattleServiceOnReadyBattleSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnReadyBattleSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ReadyBattleSpaceResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BattleServiceOnReadyBattleSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnReadyBattleSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnReadyBattleSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BattleServiceOnReadyBattleSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnReadyBattleSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type BattleServiceOnRequsetStartBattleSpaceArgs struct {
  Req *RequsetStartBattleSpace `thrift:"req,1" db:"req" json:"req"`
}

func NewBattleServiceOnRequsetStartBattleSpaceArgs() *BattleServiceOnRequsetStartBattleSpaceArgs {
  return &BattleServiceOnRequsetStartBattleSpaceArgs{}
}

var BattleServiceOnRequsetStartBattleSpaceArgs_Req_DEFAULT *RequsetStartBattleSpace
func (p *BattleServiceOnRequsetStartBattleSpaceArgs) GetReq() *RequsetStartBattleSpace {
  if !p.IsSetReq() {
    return BattleServiceOnRequsetStartBattleSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *BattleServiceOnRequsetStartBattleSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *BattleServiceOnRequsetStartBattleSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnRequsetStartBattleSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RequsetStartBattleSpace{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *BattleServiceOnRequsetStartBattleSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnRequsetStartBattleSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnRequsetStartBattleSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *BattleServiceOnRequsetStartBattleSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnRequsetStartBattleSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BattleServiceOnRequsetStartBattleSpaceResult struct {
  Success *RequsetStartBattleSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBattleServiceOnRequsetStartBattleSpaceResult() *BattleServiceOnRequsetStartBattleSpaceResult {
  return &BattleServiceOnRequsetStartBattleSpaceResult{}
}

var BattleServiceOnRequsetStartBattleSpaceResult_Success_DEFAULT *RequsetStartBattleSpaceResp
func (p *BattleServiceOnRequsetStartBattleSpaceResult) GetSuccess() *RequsetStartBattleSpaceResp {
  if !p.IsSetSuccess() {
    return BattleServiceOnRequsetStartBattleSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *BattleServiceOnRequsetStartBattleSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BattleServiceOnRequsetStartBattleSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnRequsetStartBattleSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RequsetStartBattleSpaceResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BattleServiceOnRequsetStartBattleSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnRequsetStartBattleSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnRequsetStartBattleSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BattleServiceOnRequsetStartBattleSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnRequsetStartBattleSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type BattleServiceOnExitBattleSpaceArgs struct {
  Req *ExitBattleSpace `thrift:"req,1" db:"req" json:"req"`
}

func NewBattleServiceOnExitBattleSpaceArgs() *BattleServiceOnExitBattleSpaceArgs {
  return &BattleServiceOnExitBattleSpaceArgs{}
}

var BattleServiceOnExitBattleSpaceArgs_Req_DEFAULT *ExitBattleSpace
func (p *BattleServiceOnExitBattleSpaceArgs) GetReq() *ExitBattleSpace {
  if !p.IsSetReq() {
    return BattleServiceOnExitBattleSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *BattleServiceOnExitBattleSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *BattleServiceOnExitBattleSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnExitBattleSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ExitBattleSpace{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *BattleServiceOnExitBattleSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnExitBattleSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnExitBattleSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *BattleServiceOnExitBattleSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnExitBattleSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BattleServiceOnExitBattleSpaceResult struct {
  Success *ExitBattleSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBattleServiceOnExitBattleSpaceResult() *BattleServiceOnExitBattleSpaceResult {
  return &BattleServiceOnExitBattleSpaceResult{}
}

var BattleServiceOnExitBattleSpaceResult_Success_DEFAULT *ExitBattleSpaceResp
func (p *BattleServiceOnExitBattleSpaceResult) GetSuccess() *ExitBattleSpaceResp {
  if !p.IsSetSuccess() {
    return BattleServiceOnExitBattleSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *BattleServiceOnExitBattleSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BattleServiceOnExitBattleSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BattleServiceOnExitBattleSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExitBattleSpaceResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BattleServiceOnExitBattleSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnExitBattleSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BattleServiceOnExitBattleSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BattleServiceOnExitBattleSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BattleServiceOnExitBattleSpaceResult(%+v)", *p)
}


