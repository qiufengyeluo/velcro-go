// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package pubs

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"protocols/prvs"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = prvs.GoUnusedProtection__
type LoginService interface {
  // Parameters:
  //  - Req
  OnSignIn(ctx context.Context, req *SignIn) (_r *SignInResp, _err error)
  // Parameters:
  //  - Req
  OnSignOut(ctx context.Context, req *SignOut) (_r *SignOutResp, _err error)
  // Parameters:
  //  - Req
  OnClientClosed(ctx context.Context, req *prvs.ClientClosed) (_err error)
}

type LoginServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewLoginServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LoginServiceClient {
  return &LoginServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewLoginServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LoginServiceClient {
  return &LoginServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewLoginServiceClient(c thrift.TClient) *LoginServiceClient {
  return &LoginServiceClient{
    c: c,
  }
}

func (p *LoginServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *LoginServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *LoginServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *LoginServiceClient) OnSignIn(ctx context.Context, req *SignIn) (_r *SignInResp, _err error) {
  var _args0 LoginServiceOnSignInArgs
  _args0.Req = req
  var _result2 LoginServiceOnSignInResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "OnSignIn", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  if _ret3 := _result2.GetSuccess(); _ret3 != nil {
    return _ret3, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnSignIn failed: unknown result")
}

// Parameters:
//  - Req
func (p *LoginServiceClient) OnSignOut(ctx context.Context, req *SignOut) (_r *SignOutResp, _err error) {
  var _args4 LoginServiceOnSignOutArgs
  _args4.Req = req
  var _result6 LoginServiceOnSignOutResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "OnSignOut", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  if _ret7 := _result6.GetSuccess(); _ret7 != nil {
    return _ret7, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnSignOut failed: unknown result")
}

// Parameters:
//  - Req
func (p *LoginServiceClient) OnClientClosed(ctx context.Context, req *prvs.ClientClosed) (_err error) {
  var _args8 LoginServiceOnClientClosedArgs
  _args8.Req = req
  var _result10 LoginServiceOnClientClosedResult
  var _meta9 thrift.ResponseMeta
  _meta9, _err = p.Client_().Call(ctx, "OnClientClosed", &_args8, &_result10)
  p.SetLastResponseMeta_(_meta9)
  if _err != nil {
    return
  }
  return nil
}

type LoginServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler LoginService
}

func (p *LoginServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *LoginServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *LoginServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewLoginServiceProcessor(handler LoginService) *LoginServiceProcessor {

  self11 := &LoginServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self11.processorMap["OnSignIn"] = &loginServiceProcessorOnSignIn{handler:handler}
  self11.processorMap["OnSignOut"] = &loginServiceProcessorOnSignOut{handler:handler}
  self11.processorMap["OnClientClosed"] = &loginServiceProcessorOnClientClosed{handler:handler}
return self11
}

func (p *LoginServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x12 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x12.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x12

}

type loginServiceProcessorOnSignIn struct {
  handler LoginService
}

func (p *loginServiceProcessorOnSignIn) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err13 error
  args := LoginServiceOnSignInArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnSignIn", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := LoginServiceOnSignInResult{}
  if retval, err2 := p.handler.OnSignIn(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc14 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnSignIn: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnSignIn", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err13 = thrift.WrapTException(err2)
    }
    if err2 := _exc14.Write(ctx, oprot); _write_err13 == nil && err2 != nil {
      _write_err13 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err13 == nil && err2 != nil {
      _write_err13 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err13 == nil && err2 != nil {
      _write_err13 = thrift.WrapTException(err2)
    }
    if _write_err13 != nil {
      return false, thrift.WrapTException(_write_err13)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnSignIn", thrift.REPLY, seqId); err2 != nil {
    _write_err13 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err13 == nil && err2 != nil {
    _write_err13 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err13 == nil && err2 != nil {
    _write_err13 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err13 == nil && err2 != nil {
    _write_err13 = thrift.WrapTException(err2)
  }
  if _write_err13 != nil {
    return false, thrift.WrapTException(_write_err13)
  }
  return true, err
}

type loginServiceProcessorOnSignOut struct {
  handler LoginService
}

func (p *loginServiceProcessorOnSignOut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err15 error
  args := LoginServiceOnSignOutArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnSignOut", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := LoginServiceOnSignOutResult{}
  if retval, err2 := p.handler.OnSignOut(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc16 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnSignOut: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnSignOut", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := _exc16.Write(ctx, oprot); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if _write_err15 != nil {
      return false, thrift.WrapTException(_write_err15)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnSignOut", thrift.REPLY, seqId); err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if _write_err15 != nil {
    return false, thrift.WrapTException(_write_err15)
  }
  return true, err
}

type loginServiceProcessorOnClientClosed struct {
  handler LoginService
}

func (p *loginServiceProcessorOnClientClosed) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err17 error
  args := LoginServiceOnClientClosedArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnClientClosed", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := LoginServiceOnClientClosedResult{}
  if err2 := p.handler.OnClientClosed(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc18 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnClientClosed: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnClientClosed", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if err2 := _exc18.Write(ctx, oprot); _write_err17 == nil && err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err17 == nil && err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err17 == nil && err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if _write_err17 != nil {
      return false, thrift.WrapTException(_write_err17)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnClientClosed", thrift.REPLY, seqId); err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if _write_err17 != nil {
    return false, thrift.WrapTException(_write_err17)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type LoginServiceOnSignInArgs struct {
  Req *SignIn `thrift:"req,1" db:"req" json:"req"`
}

func NewLoginServiceOnSignInArgs() *LoginServiceOnSignInArgs {
  return &LoginServiceOnSignInArgs{}
}

var LoginServiceOnSignInArgs_Req_DEFAULT *SignIn
func (p *LoginServiceOnSignInArgs) GetReq() *SignIn {
  if !p.IsSetReq() {
    return LoginServiceOnSignInArgs_Req_DEFAULT
  }
return p.Req
}
func (p *LoginServiceOnSignInArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *LoginServiceOnSignInArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginServiceOnSignInArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &SignIn{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *LoginServiceOnSignInArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnSignIn_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginServiceOnSignInArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *LoginServiceOnSignInArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginServiceOnSignInArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LoginServiceOnSignInResult struct {
  Success *SignInResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLoginServiceOnSignInResult() *LoginServiceOnSignInResult {
  return &LoginServiceOnSignInResult{}
}

var LoginServiceOnSignInResult_Success_DEFAULT *SignInResp
func (p *LoginServiceOnSignInResult) GetSuccess() *SignInResp {
  if !p.IsSetSuccess() {
    return LoginServiceOnSignInResult_Success_DEFAULT
  }
return p.Success
}
func (p *LoginServiceOnSignInResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LoginServiceOnSignInResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginServiceOnSignInResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SignInResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LoginServiceOnSignInResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnSignIn_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginServiceOnSignInResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LoginServiceOnSignInResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginServiceOnSignInResult(%+v)", *p)
}

// Attributes:
//  - Req
type LoginServiceOnSignOutArgs struct {
  Req *SignOut `thrift:"req,1" db:"req" json:"req"`
}

func NewLoginServiceOnSignOutArgs() *LoginServiceOnSignOutArgs {
  return &LoginServiceOnSignOutArgs{}
}

var LoginServiceOnSignOutArgs_Req_DEFAULT *SignOut
func (p *LoginServiceOnSignOutArgs) GetReq() *SignOut {
  if !p.IsSetReq() {
    return LoginServiceOnSignOutArgs_Req_DEFAULT
  }
return p.Req
}
func (p *LoginServiceOnSignOutArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *LoginServiceOnSignOutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginServiceOnSignOutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &SignOut{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *LoginServiceOnSignOutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnSignOut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginServiceOnSignOutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *LoginServiceOnSignOutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginServiceOnSignOutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LoginServiceOnSignOutResult struct {
  Success *SignOutResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLoginServiceOnSignOutResult() *LoginServiceOnSignOutResult {
  return &LoginServiceOnSignOutResult{}
}

var LoginServiceOnSignOutResult_Success_DEFAULT *SignOutResp
func (p *LoginServiceOnSignOutResult) GetSuccess() *SignOutResp {
  if !p.IsSetSuccess() {
    return LoginServiceOnSignOutResult_Success_DEFAULT
  }
return p.Success
}
func (p *LoginServiceOnSignOutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LoginServiceOnSignOutResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginServiceOnSignOutResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SignOutResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LoginServiceOnSignOutResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnSignOut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginServiceOnSignOutResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LoginServiceOnSignOutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginServiceOnSignOutResult(%+v)", *p)
}

// Attributes:
//  - Req
type LoginServiceOnClientClosedArgs struct {
  Req *prvs.ClientClosed `thrift:"req,1" db:"req" json:"req"`
}

func NewLoginServiceOnClientClosedArgs() *LoginServiceOnClientClosedArgs {
  return &LoginServiceOnClientClosedArgs{}
}

var LoginServiceOnClientClosedArgs_Req_DEFAULT *prvs.ClientClosed
func (p *LoginServiceOnClientClosedArgs) GetReq() *prvs.ClientClosed {
  if !p.IsSetReq() {
    return LoginServiceOnClientClosedArgs_Req_DEFAULT
  }
return p.Req
}
func (p *LoginServiceOnClientClosedArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *LoginServiceOnClientClosedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginServiceOnClientClosedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &prvs.ClientClosed{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *LoginServiceOnClientClosedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnClientClosed_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginServiceOnClientClosedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *LoginServiceOnClientClosedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginServiceOnClientClosedArgs(%+v)", *p)
}

type LoginServiceOnClientClosedResult struct {
}

func NewLoginServiceOnClientClosedResult() *LoginServiceOnClientClosedResult {
  return &LoginServiceOnClientClosedResult{}
}

func (p *LoginServiceOnClientClosedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginServiceOnClientClosedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnClientClosed_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginServiceOnClientClosedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginServiceOnClientClosedResult(%+v)", *p)
}


