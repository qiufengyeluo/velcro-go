// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package messages

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - SequenceID
//  - ForwardTime
//  - Timeout
//  - Message
type RpcRequestMessage struct {
  SequenceID int32 `thrift:"SequenceID,1" db:"SequenceID" json:"SequenceID"`
  ForwardTime int64 `thrift:"ForwardTime,2" db:"ForwardTime" json:"ForwardTime"`
  Timeout int64 `thrift:"Timeout,3" db:"Timeout" json:"Timeout"`
  Message []byte `thrift:"Message,4" db:"Message" json:"Message"`
}

func NewRpcRequestMessage() *RpcRequestMessage {
  return &RpcRequestMessage{}
}


func (p *RpcRequestMessage) GetSequenceID() int32 {
  return p.SequenceID
}

func (p *RpcRequestMessage) GetForwardTime() int64 {
  return p.ForwardTime
}

func (p *RpcRequestMessage) GetTimeout() int64 {
  return p.Timeout
}

func (p *RpcRequestMessage) GetMessage() []byte {
  return p.Message
}
func (p *RpcRequestMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcRequestMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SequenceID = v
}
  return nil
}

func (p *RpcRequestMessage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ForwardTime = v
}
  return nil
}

func (p *RpcRequestMessage)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timeout = v
}
  return nil
}

func (p *RpcRequestMessage)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *RpcRequestMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RpcRequestMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcRequestMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "SequenceID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:SequenceID: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SequenceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SequenceID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:SequenceID: ", p), err) }
  return err
}

func (p *RpcRequestMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ForwardTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ForwardTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ForwardTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ForwardTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ForwardTime: ", p), err) }
  return err
}

func (p *RpcRequestMessage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Timeout", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Timeout: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Timeout)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Timeout (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Timeout: ", p), err) }
  return err
}

func (p *RpcRequestMessage) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Message", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Message: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Message); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Message (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Message: ", p), err) }
  return err
}

func (p *RpcRequestMessage) Equals(other *RpcRequestMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SequenceID != other.SequenceID { return false }
  if p.ForwardTime != other.ForwardTime { return false }
  if p.Timeout != other.Timeout { return false }
  if bytes.Compare(p.Message, other.Message) != 0 { return false }
  return true
}

func (p *RpcRequestMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcRequestMessage(%+v)", *p)
}

func (p *RpcRequestMessage) Validate() error {
  return nil
}
